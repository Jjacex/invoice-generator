
<%- include('../partials/navbar.ejs') %>

<h1><%=invoice.name%></h1>
<h2><%=invoice.date%></h2>
<p><%=invoice.description%></p>


<h2>Add an Expense</h2>
<form action=<%="/expense/addExpense/"+ user._id + '/' + invoice._id%> method="POST">
    <label for="expense_date">Expense Date</label>
    <input type="text" name="expense_date" placeholder="01/01/2022">
    <label for="expense_category">Expense Category</label>
    <select name="expense_category" id="expense_category">
        <option value=""></option>
        <% categories.forEach(category => { %>
            <option value="<%=category.name%>"><%=category.name%></option>
        <% }) %>
    </select>
    <label for="expense_name">Vendor</label>
    <select name="expense_vendor" id="expense_vendor">
        <option value=""></option>
        <% vendors.forEach(vendor => { %>
            <option value="<%=vendor.name%>"><%=vendor.name%></option>
        <% }) %>
    </select>
    <label for="expense_description">Expense Description</label>
    <input type="text" name="expense_description">
    <label for="expense_cost">Cost</label>
    <input type="text" name="expense_cost">
    <button>Add</button>
</form>

<h2>Expenses</h2>
<h3 id="invoice_cost"><%=invoice.cost%></h3>
<a href=<%= 'http://localhost:5000/invoice/generateInvoicePdf/' + invoice._id %>>Print</a>
<button id="expense_delete_button" style="display:none;" onclick="deleteExpenses(this, '<%=NODE_ENV%>')">Delete</button>

<% if (expenses.length > 0) { %>
    <table id="expense_table">
        <tr>
            <th>Date</th>
            <th>Category</th>
            <th>Vendor</th>
            <th>Description</th>
            <th>Cost</th>
            <th id="complete_column">Complete</th>
            <th id="delete_column">Delete</th>
            <th>Modify</th>
        </tr>
        <% expenses.forEach(expense => { %>
            <tr class="expense_info_row" expense="<%=expense._id%>">
                <td><%=expense.date%></td>
                <td><%=expense.category%></td>
                <td><%=expense.vendor%></td>
                <td><%=expense.description%></td>
                <td class="expense_cost"><%=expense.cost%></td>
                <td>
                    <% if (expense.completed == true) { %>
                        <input type="checkbox" name="expense_completed" class='expense_complete_checkbox' onclick="completeExpense(this, '<%=NODE_ENV%>', '<%=expense._id%>', '<%=invoice._id%>')" checked>
                    <% } else { %>
                        <input type="checkbox" name="expense_completed" class="expense_complete_checkbox" onclick="completeExpense(this, '<%=NODE_ENV%>', '<%=expense._id%>', '<%=invoice._id%>')">
                    <% } %>
                </td>
                <td>
                    <input type="checkbox" class="expense_delete_checkbox" onclick="toggleExpenseDeleteButton(this)">
                </td>
                <td>
                    <button toggled='false' name="edit_button" class="expense_edit_button" onclick="toggleEditForm(this)">Edit</button>
                </td>
            </tr>
            <!-- need to move this over to css later (this inline styling) -->
            <tr style="display:none;">
                <form action=<%="/expense/updateExpense/" + invoice._id + '/' + expense._id%> method='POST'>
                    <td>
                        <input type="text" name="expense_date" value="<%=expense.date%>">
                    </td>
                    <td>
                        <select name="expense_category">
                            <option value="<%=expense.category%>"><%=expense.category%></option>
                            <% categories.forEach(category => { %>
                                <!-- omit the current category from the lisitng -->
                                <%if (expense.category != category.name) { %>
                                    <option value="<%=category.name%>"><%=category.name%></option>
                                <% } %>
                            <% }) %>
                        </select>
                    </td>
                    <td>
                        <select name="expense_vendor">
                            <option value="<%=expense.vendor%>"><%=expense.vendor%></option>
                            <% vendors.forEach(vendor => { %>
                                <!-- omit the current category from the lisitng -->
                                <%if (expense.vendor != vendor.name) { %>
                                    <option value="<%=vendor.name%>"><%=vendor.name%></option>
                                <% } %>
                            <% }) %>
                        </select>
                    </td>
                    <td>
                        <input type="text" name="expense_description" value="<%=expense.description%>">
                    </td>
                    <td>
                        <input type="text" name="expense_cost" value="<%=expense.cost%>">
                    </td>
                    <td>
                        <button type="submit" onclick="toggleEditForm(this)" id=<%=expense._id%>>Save</button>
                        <button type="button" onclick="toggleEditForm(this)">Cancel</button>
                    </td>
                </form>
            </tr>
        <% }) %>
    </table>
<% } %>



<!-- provides us with the ability to convert an html page into a pdf -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js" integrity="sha512-GsLlZN/3F2ErC5ifS5QtgpiJtWd43JWSuIgh7mbzZ8zBps+dvLusV+eNQATqgA/HdeKFVgA5v3S/cIrLF7QnIg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- contains functions to work with tables -->
<script src="../../public/service/tableFunctions.js"></script>
<!-- contains functions to work with URLS -->
<script src="../../public/service/URLFunctions.js"></script>

<script>

    const toggleEditForm = async (e) => {

        //initializing our variables
        let editFormRow //this is the hidden row which contains a form to update the expenses
        let expenseInfoRow //this is the row that is shown by default and contains info about the expenses

        //these columns will be removed upon editing the expenses
        const completeColumn = document.getElementById('complete_column')
        const deleteColumn = document.getElementById('delete_column')

        //every checkbox in these classes will be removed
        const expenseCompleteCheckbox = document.getElementsByClassName('expense_complete_checkbox')
        const expenseDeleteCheckbox = document.getElementsByClassName('expense_delete_checkbox')
        const expenseEditButton = document.getElementsByClassName('expense_edit_button')
        const elementsToHide = [].concat(expenseCompleteCheckbox, expenseDeleteCheckbox, expenseEditButton)

        toggleTableCells(expenseCompleteCheckbox)
        toggleTableCells(expenseDeleteCheckbox)
        toggleTableCells(expenseEditButton)




        //using a switch statement to identify the editFormRow and expenseInfoRow based off of the e.getAttribute('name')
        switch(e.getAttribute('name')){
            case 'edit_button':
                //relative routes from our edit button
                editFormRow = e.parentElement.parentElement.nextElementSibling
                expenseInfoRow = e.parentElement.parentElement
                break
            default:
                //relative routes from our save and cancel button (may need to modify if we move location of buttons)
                editFormRow = e.parentElement.parentElement
                expenseInfoRow = e.parentElement.parentElement.previousElementSibling
                break
        }

        //using a switch statement to change the display of the rows identified above (toggled functionality)
        switch (editFormRow.toggled){
            case undefined:
                editFormRow.toggled = true
                editFormRow.style.display = 'table-row'
                expenseInfoRow.style.display = 'none'
                deleteColumn.style.display = 'none'
                completeColumn.style.display = 'none'
                break
            case true:
                editFormRow.toggled = false
                editFormRow.style.display = 'none'
                expenseInfoRow.style.display = 'table-row'
                deleteColumn.style.display = 'table-cell'
                completeColumn.style.display = 'table-cell'
                break
            case false:
                editFormRow.toggled = true
                editFormRow.style.display = 'table-row'
                expenseInfoRow.style.display = 'none'
                deleteColumn.style.display = 'none'
                completeColumn.style.display = 'none'
                break
        }
    }

    const deleteExpense = async (e, env, expense, invoice) => {

        //setting up our variables
        let url
        const expenseInfoRow = e.parentElement.parentElement
        const expenseFormRow = e.parentElement.parentElement.previousElementSibling
        const expenseTable = document.getElementById('expense_table')

        console.log(expenseTable.firstElementChild.children.length)
        
        //deleting the row from the DOM | if it is the last row, deleting the table
        if (expenseTable.firstElementChild.children.length <= 3) {
            expenseTable.remove()
        } else {
            expenseInfoRow.remove()
            expenseFormRow.remove()
        }
        
        //establishing our URL (dev or production)
        if (e.getAttribute('env') == 'development'){
            url = 'http://localhost:5000/expense/deleteExpense/' + expense
        } else {
            //production url goes here
        }

        //doing our fetch request
        try {
            const response = await fetch(url, {
            method: 'delete',
            })
        } catch (error) {
            console.log(error)
        }

        
    }

    const completeExpense = async (e, env, expense, invoice) => {
        
        //setting up our variables
        let url


        //defining our url based off of the NODE_ENV
        if (env == 'development'){
            url = 'http://localhost:5000/expense/completeExpense/' + invoice + '/' + expense
        } else {
            //enter production url here
        }

        //calling our fetch statement to complete the expense
        try {
            const response = await fetch(url, {
            method: 'put'
            })
            const data = await response.json()
            document.getElementById('invoice_cost').innerText = data.cost
            
        } catch (error) {
           console.log(error) 
        }  

    }

    const printInvoice = async (e, env, invoice) => {

        let url

        //getting our url based off of the NODE_ENV
        if (env == 'development'){
            url = 'http://localhost:5000/invoice/generateInvoicePdf/' + invoice
        } else {
            // enter production url here
        }

        const response = await fetch(url, {
            method: 'get'
        })
  
    }

    const toggleExpenseDeleteButton = async (e) => {
        const expenseDeleteButton = document.getElementById('expense_delete_button') //grabbing our delete button
        const deleteExpenseCheckboxes = document.getElementsByClassName('expense_delete_checkbox') //grabbing all the checkboxes
        toggleCheckboxButton(deleteExpenseCheckboxes, expenseDeleteButton, 'flex')
    }

    const deleteExpenses = async (e, env) => {

        let url //hold our url for our fetch request
        const expenseTable = document.getElementById('expense_table')
        const expenseInfoRows = document.getElementsByClassName('expense_info_row')

        //this function loops through the table and returns an array
        //the array will contain any rows which contain a checkbox matching the given classname
        const checkedRows = getCheckedRows(expenseInfoRows, 'expense_delete_checkbox')


        //this function takes in an array of speicific rows and removes them
        //if the last row is removed, the given table is also removed
        removeRowsAndTable(checkedRows, expenseTable)

        //removing our delete button
        e.style.display = 'none'

        // looping through our rows (each representing an invoice) to call fetch requests for deletion
        for (x = 0; x < checkedRows.length; x++) {
            
            //getting our url based off our NODE_ENV
            url = getURL(env, '/expense/deleteExpense', {
                invoice: checkedRows[x].getAttribute('expense')
            })

            //calling our fetch request to delete the invoice/invoices
            const response = await fetch(url, {
                method:'DELETE'
            })

            //getting the data back (the new cost of the invoice)
            const data = await response.json()

            //if it is the last loop, get the cost and render it to the screen
            if (x == checkedRows.length-1) {
                console.log('hit')
                document.getElementById('invoice_cost').innerText = data.cost
            }

        }

    }




</script>