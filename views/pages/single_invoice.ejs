<%- include('../partials/navbar.ejs') %>

<h1><%=invoice.name%></h1>
<h2><%=invoice.date%></h2>
<p><%=invoice.description%></p>


<h2>Add an Expense</h2>
<form action=<%="/expense/addExpense/" + invoice._id%> method="POST">
    <label for="expense_category">Expense Category</label>
        <select name="expense_category" id="expense_category">
            <option value=""></option>
            <% categories.forEach(category => { %>
                <option value="<%=category.name%>"><%=category.name%></option>
            <% }) %>
        </select>
    <label for="expense_date">Expense Date</label>
    <input type="text" name="expense_date" placeholder="01/01/2022">
    <label for="expense_name">Place of Purchase</label>
    <input type="text" name="expense_place">
    <label for="expense_description">Expense Description</label>
    <input type="text" name="expense_description">
    <label for="expense_price">Cost</label>
    <input type="text" name="expense_price">
    <button>Add</button>
</form>

<h2>Expenses</h2>
<h3 id="cost"><%=cost%></h3>

<% if (expenses.length > 0) { %>
    <table id="expense_table">
        <tr>
            <th>Date</th>
            <th>Category</th>
            <th>Place</th>
            <th>Description</th>
            <th>Price</th>
            <th>Completed?</th>
            <th>Modify</th>
        </tr>
        <% expenses.forEach(expense => { %>
            <tr>
                <td><%=expense.date%></td>
                <td><%=expense.category%></td>
                <td><%=expense.place%></td>
                <td><%=expense.description%></td>
                <td class="expense_price"><%=expense.price%></td>
                <td>
                    <% if (expense.completed == true) { %>
                        <input type="checkbox" name="expense_completed" onclick="completeExpense(this, '<%=NODE_ENV%>', '<%=expense._id%>', '<%=invoice._id%>')" checked>
                    <% } else { %>
                        <input type="checkbox" name="expense_completed" onclick="completeExpense(this, '<%=NODE_ENV%>', '<%=expense._id%>', '<%=invoice._id%>')">
                    <% } %>
                </td>
                <td>
                    <button toggled='false' name="edit_button" onclick="toggleEditForm(this)">Edit</button>
                </td>
            </tr>
            <!-- need to move this over to css later (this inline styling) -->
            <tr style="display:none;">
                <form action=<%="/expense/updateExpense/" + invoice._id + '/' + expense._id%> method='POST'>
                    <td>
                        <input type="text" name="expense_date" value="<%=expense.date%>">
                    </td>
                    <td>
                        <select name="expense_category">
                            <option value="<%=expense.category%>"><%=expense.category%></option>
                            <% categories.forEach(category => { %>
                                <!-- omit the current category from the lisitng -->
                                <%if (expense.category != category.name) { %>
                                    <option value="<%=category.name%>"><%=category.name%></option>
                                <% } %>
                            <% }) %>
                        </select>
                    </td>
                    <td>
                        <input type="text" name="expense_place" value="<%=expense.place%>">
                    </td>
                    <td>
                        <input type="text" name="expense_description" value="<%=expense.description%>">
                    </td>
                    <td>
                        <input type="text" name="expense_price" value="<%=expense.price%>">
                    </td>
                    <td>
                        <% if (expense.completed == true) { %>
                            <input type="checkbox" name="expense_completed" onclick="completeExpense(this, '<%=NODE_ENV%>', '<%=expense._id%>', '<%=invoice._id%>')" checked>
                        <% } else { %>
                            <input type="checkbox" name="expense_completed" onclick="completeExpense(this, '<%=NODE_ENV%>', '<%=expense._id%>', '<%=invoice._id%>')">
                        <% } %>
                    </td>
                    <td>
                        <button type="submit" onclick="toggleEditForm(this)" id=<%=expense._id%>>Save</button>
                        <button type="button" env=<%=NODE_ENV%> onclick="deleteExpense(this, '<%=NODE_ENV%>', '<%=expense._id%>', '<%=invoice._id%>')">Delete</button>
                        <button type="button" onclick="toggleEditForm(this)">Cancel</button>
                    </td>
                </form>
            </tr>
        <% }) %>
    </table>
<% } %>

<script>
    const toggleEditForm = async (e) => {

        //initializing our variables
        let editFormRow
        let expenseInfoRow

        //using a switch statement to identify the editFormRow and expenseInfoRow based off of the e.getAttribute('name')
        switch(e.getAttribute('name')){
            case 'edit_button':
                //relative routes for our edit button
                editFormRow = e.parentElement.parentElement.nextElementSibling
                expenseInfoRow = e.parentElement.parentElement
                break
            default:
                //relative routes for our save and cancel button (may need to modify if we move location of buttons)
                editFormRow = e.parentElement.parentElement
                expenseInfoRow = e.parentElement.parentElement.previousElementSibling
                break
        }

        //using a switch statement to change the display of the rows identified above (toggled functionality)
        switch (editFormRow.toggled){
            case undefined:
                editFormRow.toggled = true
                editFormRow.style.display = 'table-row'
                expenseInfoRow.style.display = 'none'
                break
            case true:
                editFormRow.toggled = false
                editFormRow.style.display = 'none'
                expenseInfoRow.style.display = 'table-row'
                break
            case false:
                editFormRow.toggled = true
                editFormRow.style.display = 'table-row'
                expenseInfoRow.style.display = 'none'
                break
        }
    }

    const deleteExpense = async (e, env, expense, invoice) => {

        //setting up our variables
        let url
        const expenseInfoRow = e.parentElement.parentElement
        const expenseFormRow = e.parentElement.parentElement.previousElementSibling
        const expenseTable = document.getElementById('expense_table')

        console.log(expenseTable.firstElementChild.children.length)
        
        //deleting the row from the DOM | if it is the last row, deleting the table
        if (expenseTable.firstElementChild.children.length <= 3) {
            expenseTable.remove()
        } else {
            expenseInfoRow.remove()
            expenseFormRow.remove()
        }
        
        //establishing our URL (dev or production)
        if (e.getAttribute('env') == 'development'){
            url = 'http://localhost:5000/expense/deleteExpense/' + expense
        } else {
            //production url goes here
        }

        //doing our fetch request
        try {
            const response = await fetch(url, {
            method: 'delete',
            })
        } catch (error) {
            console.log(error)
        }

        //defining our url based off of the NODE_ENV
        if (env == 'development'){
            url = 'http://localhost:5000/invoice/getTotal/' + invoice
        } else {
            //enter production url here
        }

        //calling our fetch request to pull in the updated cost
        try {
            const response = await fetch(url, {
                method: 'get'
            })
            let cost = await response.json()
            console.log(cost)
            //grabbing our element which contains our total cost
            const invoiceTotal = document.getElementById('cost')
            //updating the cost
            invoiceTotal.innerText = cost
        } catch (error) {
            console.log(error.message)
        }
    }

    const completeExpense = async (e, env, expense, invoice) => {
        
        //setting up our variables
        let url

        //defining our url based off of the NODE_ENV
        if (env == 'development'){
            url = 'http://localhost:5000/expense/completeExpense/' + expense
        } else {
            //enter production url here
        }

        //calling our fetch statement
        try {
            const response = await fetch(url, {
            method: 'put'
            })
        } catch (error) {
           console.log(error.message) 
        }

        //defining our url based off of the NODE_ENV
        if (env == 'development'){
            url = 'http://localhost:5000/invoice/getTotal/' + invoice
        } else {
            //enter production url here
        }

        //calling our fetch request to pull in the updated cost
        try {
            const response = await fetch(url, {
                method: 'get'
            })
            let cost = await response.json()
            //grabbing our element which contains our total cost
            const invoiceTotal = document.getElementById('cost')
            //updating the cost
            invoiceTotal.innerText = cost //rounding the cost to the 100ths place
        } catch (error) {
            console.log(error.message)
        }
        
    }




</script>